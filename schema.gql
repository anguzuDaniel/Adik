# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Users {
  id: ID!
  username: String!
  email: String!
  role: String!
  recoveryStage: String!
}

type AuthPayload {
  userId: ID!
  username: String
  email: String!
  role: Role!
  accessToken: String!
  message: String
}

enum Role {
  ADMIN
  USER
}

type Messages {
  id: Int!
  senderId: String!
  receiverId: String!
  content: String!
  parentId: Float
  timestamp: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeleteMessagesResponse {
  success: Boolean!
  message: String!
}

type Journal {
  id: ID!
  content: String!
  sentimentScore: Float
  createdAt: DateTime!
  user: Users!
}

type Report {
  id: Int!
  reporterId: String!
  reportedUserId: String!
  reason: String!
  status: String!
}

type Match {
  id: Int!
  userId: String!
  matchedUserId: String!
  static: String!
}

type Resource {
  id: Int!
  title: String!
  type: String!
  url: String!
}

type UploadFileResponse {
  message: String!
  result: String!
}

type Query {
  user(id: String!): Users!
  viewer: Users!
  journals: [Journal!]!
  journal(id: String!): Journal!
  getJournalByUserId(userId: ID!): [Journal!]!
  reports: [Report!]!
  report(id: Int!): Report!
  matches: [Match!]!
  match(id: Int!): Match!
  resources: [Resource!]!
  resource(id: Int!): Resource!
}

type Mutation {
  createUser(createUserInput: CreateUsersInput!): Users!
  updateUser(updateUserInput: UpdateUsersInput!): Users!
  removeUser(id: String!): Users!
  signUp(input: SignInInput!): AuthPayload!
  signIn(input: SignInInput!): AuthPayload!
  createMessage(createMessageInput: CreateMessagesInput!): Messages!
  getMessageBetweenUsers(receiverId: String!): [Messages!]!
  deleteMessage(messageId: Float!): DeleteMessagesResponse!
  createJournal(createJournalInput: CreateJournalInput!): Journal!
  updateJournal(id: String!, updateJournalInput: UpdateJournalInput!): Journal!
  removeJournal(id: String!): Journal!
  createReport(createReportInput: CreateReportInput!): Report!
  updateReport(updateReportInput: UpdateReportInput!): Report!
  removeReport(id: Int!): Report!
  createMatch(createMatchInput: CreateMatchInput!): Match!
  updateMatch(updateMatchInput: UpdateMatchInput!): Match!
  removeMatch(id: Int!): Match!
  createResource(createResourceInput: CreateResourceInput!): Resource!
  updateResource(updateResourceInput: UpdateResourceInput!): Resource!
  removeResource(id: Int!): Resource!
  uploadFile(file: Upload!, bucket: String): UploadFileResponse!
}

input CreateUsersInput {
  username: String!
  email: String!
  role: Role!
  recoveryStage: RecoveryStage!
}

enum RecoveryStage {
  PRE_CONTEMPLATION
  CONTEMPLATION
  PREPARATION
  ACTION
  MAINTENANCE
}

input UpdateUsersInput {
  username: String
  email: String
  role: String
  recoveryStage: RecoveryStage
  id: String!
}

input SignInInput {
  email: String!
  password: String!
}

input CreateMessagesInput {
  content: String!
  senderId: String!
  parentId: Float
  receiverId: String!
}

input CreateJournalInput {
  content: String!
  sentimentScore: Float
}

input UpdateJournalInput {
  content: String
  sentimentScore: Float
}

input CreateReportInput {
  id: Int!
  reporterId: String!
  reason: String!
  status: ReportStatus!
}

enum ReportStatus {
  PENDING
  RESOLVED
}

input UpdateReportInput {
  id: Int!
  reporterId: String!
  reason: String!
  status: ReportStatus!
}

input CreateMatchInput {
  id: Int!
  userId: String!
  matchedUserId: String!
  static: String!
}

input UpdateMatchInput {
  id: Int!
  userId: String
  matchedUserId: String
  static: String
}

input CreateResourceInput {
  id: Int!
  title: String!
  type: String!
  url: String!
}

input UpdateResourceInput {
  id: Int!
  title: String!
  type: String!
  url: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload